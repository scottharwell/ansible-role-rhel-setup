---
- name: Print the working os family
  ansible.builtin.debug:
    msg: "{{ ansible_os_family }}"

- name: Include Red Hat Derivatives Tasks
  include_tasks: redhat.yml
  when: ansible_os_family == 'RedHat'

- name: Include Debian Derivatives Tasks
  include_tasks: debian.yml
  when: ansible_os_family == 'Debian'

- name: Include Arch Derivatives Tasks
  include_tasks: arch.yml
  when: ansible_os_family == 'Archlinux'

- name: Include FreeBSD Derivatives Tasks
  include_tasks: bsd.yml
  when: ansible_os_family == 'FreeBSD'

- name: Create groups
  become: true
  loop: "{{ groups_to_create }}"
  group:
    name: "{{ item }}"
    state: present
  register: create_groups
  tags:
    - groups

- name: Create groups for users
  become: true
  loop: "{{ users }}"
  group:
    name: "{{ item.name }}"
  register: create_user_groups
  tags:
    - users
    - groups

- name: Get all groups
  getent:
    database: group
    split: ":"
  tags:
    - users
    - groups

- name: Get path for Fish Shell to set as default shell for users
  command: which fish
  register: fish_path
  changed_when: 0
  tags:
    - users
    - shell
    - fish
    - which

- name: Setup users
  become: true
  loop: "{{ users }}"
  user:
    name: "{{ item.name }}"
    group: "{{ item.name }}"
    shell: "{{ fish_path.stdout }}"
    create_home: true
  register: create_users
  when: fish_path is succeeded
  tags:
    - users
    - groups
    - shell

- name: Add additional groups to user
  become: true
  loop: "{{ users }}"
  user:
    name: "{{ item.name }}"
    groups: "{{ item.groups }}"
    append: true
  when: item.groups is defined and (item.groups|length>0)
  tags:
    - users
    - groups

- name: Add administrative groups to user
  become: true
  user:
    name: "{{ item[0].name }}"
    groups: "{{ item[1] }}"
    append: true
  when: item[0].admin is defined and item[0].admin and item[1] in ansible_facts.getent_group
  register: became_admin
  with_nested:
    - "{{ users }}"
    - "{{ admin_groups }}"
  tags:
    - users
    - groups

- name: "Create authorized_keys file"
  become: true
  authorized_key:
    user: "{{ item[0].name }}"
    state: present
    key: "{{ item[1] }}"
    exclusive: false
  with_nested:
    - "{{ create_users.results }}"
    - "{{ ssh_public_keys }}"
  tags:
    - ssh
    - shell

- name: Fish Shell setup tasks
  include_tasks: fish.yml
  when: config_fish

- name: VIM setup tasks
  include_tasks: fish.yml
  when: config_vim

- name: Ensure configs dir is owned by user
  loop: "{{ create_users.results }}"
  become: true
  file:
    path: "{{ item.home }}/.config"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    recurse: true
  tags:
    - fish
    - omf
    - shell
