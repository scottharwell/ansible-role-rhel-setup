---
- name: Print the working os family
  ansible.builtin.debug:
    msg: "{{ ansible_os_family }}"

- name: Include Red Hat Derivatives Tasks
  include_tasks: redhat.yml
  when: ansible_os_family == 'RedHat'

- name: Include Debian Derivatives Tasks
  include_tasks: debian.yml
  when: ansible_os_family == 'Debian'

- name: Include Arch Derivatives Tasks
  include_tasks: arch.yml
  when: ansible_os_family == 'Archlinux'

- name: Include FreeBSD Derivatives Tasks
  include_tasks: bsd.yml
  when: ansible_os_family == 'FreeBSD'

- name: Create groups
  become: true
  loop: "{{ groups_to_create }}"
  group:
    name: "{{ item }}"
    state: present
  register: create_groups
  tags:
    - groups

- name: Create groups for users
  become: true
  loop: "{{ users }}"
  group:
    name: "{{ item.name }}"
  register: create_user_groups
  tags:
    - users
    - groups

- name: Get all groups
  getent:
    database: group
    split: ":"
  tags:
    - users
    - groups

- name: Get path for Fish Shell
  command: which fish
  register: fish_path
  changed_when: 0
  tags:
    - users
    - shell
    - fish
    - which

- name: Setup users
  become: true
  loop: "{{ users }}"
  user:
    name: "{{ item.name }}"
    group: "{{ item.name }}"
    shell: "{{ fish_path.stdout }}"
    create_home: true
  register: create_users
  when: fish_path is succeeded
  tags:
    - users
    - groups
    - shell

- name: Add additional groups to user
  become: true
  loop: "{{ users }}"
  user:
    name: "{{ item.name }}"
    groups: "{{ item.groups }}"
    append: true
  when: item.groups is defined and (item.groups|length>0)
  tags:
    - users
    - groups

- name: Add administrative groups to user
  become: true
  user:
    name: "{{ item[0].name }}"
    groups: "{{ item[1] }}"
    append: true
  when: item[0].admin is defined and item[0].admin and item[1] in ansible_facts.getent_group
  register: became_admin
  with_nested:
    - "{{ users }}"
    - "{{ admin_groups }}"
  tags:
    - users
    - groups

- name: "Create authorized_keys file"
  become: true
  authorized_key:
    user: "{{ item[0].name }}"
    state: present
    key: "{{ item[1] }}"
    exclusive: false
  with_nested:
    - "{{ create_users.results }}"
    - "{{ ssh_public_keys }}"
  tags:
    - ssh
    - shell

- name: Create Fish shell configs directory
  loop: "{{ create_users.results }}"
  become: true
  file:
    path: "{{ item.home }}/.config/fish"
    state: directory
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: "0744"
  tags:
    - fish
    - shell

- name: Copy Fish shell config
  loop: "{{ create_users.results }}"
  become: true
  copy:
    src: config.fish
    dest: "{{ item.home }}/.config/fish/config.fish"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: "0644"
  tags:
    - fish
    - shell

- name: Get OMF installer
  loop: "{{ create_users.results }}"
  become: true
  get_url:
    url: "{{ omf_install_script_url }}"
    dest: "/tmp/omf_install"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: "0777"
  register: omf_installer_download
  tags:
    - fish
    - omf
    - shell

- name: Copy OMF installer to each user's home directory
  become: true
  loop: "{{ create_users.results }}"
  copy:
    remote_src: true
    src: /tmp/omf_install
    dest: "{{ item.home }}/install"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0755
  register: omf_installer_copy
  when: omf_installer_download is succeeded
  tags:
    - fish
    - omf
    - shell

- name: Install OMF
  loop: "{{ create_users.results }}"
  become: true
  become_user: "{{ item.name }}"
  timeout: 30
  shell: "./install --noninteractive --yes"
  args:
    executable: "{{ fish_path.stdout }}"
    chdir: "{{ item.home }}"
  register: install_omf
  when: omf_installer_copy is succeeded
  tags:
    - fish
    - omf
    - shell
    - skip_ansible_lint # This needs to be run in the user's shell

- name: Remove OMF installer
  loop: "{{ create_users.results }}"
  become: true
  file:
    path: "{{ item.home }}/install"
    state: absent
  tags:
    - fish
    - omf
    - shell

- name: Install BobTheFish
  loop: "{{ create_users.results }}"
  become: true
  become_user: "{{ item.name }}"
  timeout: 30
  shell: omf install bobthefish
  args:
    executable: "{{ fish_path.stdout }}"
    chdir: "{{ item.home }}"
  when: install_omf is succeeded
  tags:
    - fish
    - omf
    - shell
    - skip_ansible_lint # This needs to be run in the user's shell

- name: Check Ultimate VIM repo existence in tmp
  become: true
  stat:
    path: "{{ ultimate_vim_tmp_path }}"
  register: ultimate_vim_dir_exists

- name: Clone Ultimate VIM repo to temporary directory
  become: true
  ansible.builtin.git:
    repo: "{{ ultimate_vim_git_url }}"
    dest: "{{ ultimate_vim_tmp_path }}"
    single_branch: true
    version: master
    depth: 1
  when: ultimate_vim_dir_exists.stat.exists is false
  register: clone_ultimate_vim
  tags:
    - shell
    - vim

- name: Copy Ultimate VIM to each user's home directory
  become: true
  loop: "{{ create_users.results }}"
  copy:
    remote_src: true
    src: "{{ ultimate_vim_tmp_path }}"
    dest: "{{ item.home }}"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: 0755
  when: clone_ultimate_vim is succeeded
  tags:
    - shell
    - vim

- name: Install Ultimate VIM
  loop: "{{ create_users.results }}"
  become: true
  become_user: "{{ item.name }}"
  timeout: 30
  shell: "sh .vim_runtime/install_awesome_vimrc.sh"
  args:
    chdir: "{{ item.home }}"
  register: ultimate_vim
  when: clone_ultimate_vim is succeeded
  tags:
    - shell
    - vim
    - skip_ansible_lint # This needs to be run in the user's shell

- name: Copy VIM my_configs
  loop: "{{ create_users.results }}"
  become: true
  copy:
    src: vim_my_configs.vim
    dest: "{{ item.home }}/.vim_runtime/my_configs.vim"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    mode: "0644"
  when: ultimate_vim is not skipped and ultimate_vim is succeeded
  tags:
    - vim
    - shell

- name: Ensure configs dir is owned by user
  loop: "{{ create_users.results }}"
  become: true
  file:
    path: "{{ item.home }}/.config"
    owner: "{{ item.name }}"
    group: "{{ item.group }}"
    recurse: true
  tags:
    - fish
    - omf
    - shell
